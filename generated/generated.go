// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sun, 04 May 2025 12:56:10 BST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package generated

/*
#cgo LDFLAGS: -L/usr/lib -lrkllmrt
#include "types.h"
#include "<rkllm.h>"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// Rkllm_createDefaultParam function as declared in include/rkllm.h:220
func Rkllm_createDefaultParam() RKLLMParam {
	__ret := C.rkllm_createDefaultParam()
	__v := *NewRKLLMParamRef(unsafe.Pointer(&__ret))
	return __v
}

// Rkllm_init function as declared in include/rkllm.h:229
func Rkllm_init(handle []unsafe.Pointer, param []RKLLMParam, callback LLMResultCallback) int32 {
	chandle, chandleAllocMap := (*unsafe.Pointer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&handle)).Data)), cgoAllocsUnknown
	cparam, cparamAllocMap := unpackArgSRKLLMParam(param)
	ccallback, ccallbackAllocMap := callback.PassValue()
	__ret := C.rkllm_init(chandle, cparam, ccallback)
	runtime.KeepAlive(ccallbackAllocMap)
	packSRKLLMParam(param, cparam)
	runtime.KeepAlive(cparamAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_load_lora function as declared in include/rkllm.h:237
func Rkllm_load_lora(handle unsafe.Pointer, lora_adapter []RKLLMLoraAdapter) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	clora_adapter, clora_adapterAllocMap := unpackArgSRKLLMLoraAdapter(lora_adapter)
	__ret := C.rkllm_load_lora(chandle, clora_adapter)
	packSRKLLMLoraAdapter(lora_adapter, clora_adapter)
	runtime.KeepAlive(clora_adapterAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_load_prompt_cache function as declared in include/rkllm.h:245
func Rkllm_load_prompt_cache(handle unsafe.Pointer, prompt_cache_path string) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	prompt_cache_path = safeString(prompt_cache_path)
	cprompt_cache_path, cprompt_cache_pathAllocMap := unpackPCharString(prompt_cache_path)
	__ret := C.rkllm_load_prompt_cache(chandle, cprompt_cache_path)
	runtime.KeepAlive(prompt_cache_path)
	runtime.KeepAlive(cprompt_cache_pathAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_release_prompt_cache function as declared in include/rkllm.h:252
func Rkllm_release_prompt_cache(handle unsafe.Pointer) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	__ret := C.rkllm_release_prompt_cache(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_destroy function as declared in include/rkllm.h:259
func Rkllm_destroy(handle unsafe.Pointer) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	__ret := C.rkllm_destroy(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_run function as declared in include/rkllm.h:269
func Rkllm_run(handle unsafe.Pointer, rkllm_input []RKLLMInput, rkllm_infer_params []RKLLMInferParam, userdata unsafe.Pointer) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	crkllm_input, crkllm_inputAllocMap := unpackArgSRKLLMInput(rkllm_input)
	crkllm_infer_params, crkllm_infer_paramsAllocMap := unpackArgSRKLLMInferParam(rkllm_infer_params)
	cuserdata, cuserdataAllocMap := userdata, cgoAllocsUnknown
	__ret := C.rkllm_run(chandle, crkllm_input, crkllm_infer_params, cuserdata)
	runtime.KeepAlive(cuserdataAllocMap)
	packSRKLLMInferParam(rkllm_infer_params, crkllm_infer_params)
	runtime.KeepAlive(crkllm_infer_paramsAllocMap)
	packSRKLLMInput(rkllm_input, crkllm_input)
	runtime.KeepAlive(crkllm_inputAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_run_async function as declared in include/rkllm.h:279
func Rkllm_run_async(handle unsafe.Pointer, rkllm_input []RKLLMInput, rkllm_infer_params []RKLLMInferParam, userdata unsafe.Pointer) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	crkllm_input, crkllm_inputAllocMap := unpackArgSRKLLMInput(rkllm_input)
	crkllm_infer_params, crkllm_infer_paramsAllocMap := unpackArgSRKLLMInferParam(rkllm_infer_params)
	cuserdata, cuserdataAllocMap := userdata, cgoAllocsUnknown
	__ret := C.rkllm_run_async(chandle, crkllm_input, crkllm_infer_params, cuserdata)
	runtime.KeepAlive(cuserdataAllocMap)
	packSRKLLMInferParam(rkllm_infer_params, crkllm_infer_params)
	runtime.KeepAlive(crkllm_infer_paramsAllocMap)
	packSRKLLMInput(rkllm_input, crkllm_input)
	runtime.KeepAlive(crkllm_inputAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_abort function as declared in include/rkllm.h:286
func Rkllm_abort(handle unsafe.Pointer) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	__ret := C.rkllm_abort(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_is_running function as declared in include/rkllm.h:293
func Rkllm_is_running(handle unsafe.Pointer) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	__ret := C.rkllm_is_running(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_clear_kv_cache function as declared in include/rkllm.h:301
func Rkllm_clear_kv_cache(handle unsafe.Pointer, keep_system_prompt int32) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	ckeep_system_prompt, ckeep_system_promptAllocMap := (C.int)(keep_system_prompt), cgoAllocsUnknown
	__ret := C.rkllm_clear_kv_cache(chandle, ckeep_system_prompt)
	runtime.KeepAlive(ckeep_system_promptAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Rkllm_set_chat_template function as declared in include/rkllm.h:317
func Rkllm_set_chat_template(handle unsafe.Pointer, system_prompt string, prompt_prefix string, prompt_postfix string) int32 {
	chandle, chandleAllocMap := handle, cgoAllocsUnknown
	system_prompt = safeString(system_prompt)
	csystem_prompt, csystem_promptAllocMap := unpackPCharString(system_prompt)
	prompt_prefix = safeString(prompt_prefix)
	cprompt_prefix, cprompt_prefixAllocMap := unpackPCharString(prompt_prefix)
	prompt_postfix = safeString(prompt_postfix)
	cprompt_postfix, cprompt_postfixAllocMap := unpackPCharString(prompt_postfix)
	__ret := C.rkllm_set_chat_template(chandle, csystem_prompt, cprompt_prefix, cprompt_postfix)
	runtime.KeepAlive(prompt_postfix)
	runtime.KeepAlive(cprompt_postfixAllocMap)
	runtime.KeepAlive(prompt_prefix)
	runtime.KeepAlive(cprompt_prefixAllocMap)
	runtime.KeepAlive(system_prompt)
	runtime.KeepAlive(csystem_promptAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}
